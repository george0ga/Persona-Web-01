#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ track_http_metrics
"""
import sys
import os
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "python", "app")))

from metrics import track_http_metrics, HTTP_REQUESTS_TOTAL, HTTP_REQUEST_DURATION
from fastapi import Request
from unittest.mock import Mock

print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä track_http_metrics...")

# –°–æ–∑–¥–∞–µ–º –º–æ–∫ Request
mock_request = Mock()
mock_request.method = "POST"
mock_request.url.path = "/api/v1/check_courts"
mock_request.client.host = "127.0.0.1"

@track_http_metrics()
async def test_function(request: Request):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º"""
    print("üìù –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è...")
    await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
    return {"status": "success"}

async def test_decorator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä"""
    try:
        print("üöÄ –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º...")
        result = await test_function(mock_request)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        print("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏...")
        print("‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫!")
        print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        print(f"HTTP_REQUESTS_TOTAL –¥–æ—Å—Ç—É–ø–µ–Ω: {HTTP_REQUESTS_TOTAL}")
        print(f"HTTP_REQUEST_DURATION –¥–æ—Å—Ç—É–ø–µ–Ω: {HTTP_REQUEST_DURATION}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_decorator())

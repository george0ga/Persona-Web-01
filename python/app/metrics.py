# metrics.py
"""–°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ Prometheus –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
import asyncio
from prometheus_client import Counter, Histogram, Gauge, Summary, generate_latest, CONTENT_TYPE_LATEST
from fastapi import Request, Response
import time
from typing import Dict, Any, Callable, Awaitable
from functools import wraps
from app.utils.logger import logger

# ===== –ú–ï–¢–†–ò–ö–ò –î–õ–Ø –ì–†–ê–§–ò–ö–û–í =====

# 1. HTTP –ó–ê–ü–†–û–°–´ (–≥—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
HTTP_REQUESTS_TOTAL = Counter(
    'http_requests_total',
    'Total number of HTTP requests',
    ['method', 'endpoint', 'status', 'client_ip']
)

# 2. –í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø (–≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
HTTP_REQUEST_DURATION = Histogram(
    'http_request_duration_seconds',
    'HTTP request duration in seconds',
    ['method', 'endpoint'],
    buckets=[0.1, 0.25, 0.5, 1.0, 2.5, 5.0, 10.0, 25.0, 50.0, 100.0]
)

# 3. –ü–ê–†–°–ò–ù–ì –°–£–î–û–í (–≥—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏)
COURT_PARSING_TOTAL = Counter(
    'court_parsing_total',
    'Total number of court parsing attempts',
    ['court_type', 'status', 'parsing_method']
)

# 4. –í–†–ï–ú–Ø –ü–ê–†–°–ò–ù–ì–ê (–≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞)
COURT_PARSING_DURATION = Histogram(
    'court_parsing_duration_seconds',
    'Court parsing duration in seconds',
    ['court_type', 'parsing_method'],
    buckets=[1.0, 2.5, 5.0, 10.0, 25.0, 50.0, 100.0, 250.0, 500.0]
)

# 5. –ö–ê–ü–ß–ê (–≥—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è)
CAPTCHA_SOLVING_TOTAL = Counter(
    'captcha_solving_total',
    'Total number of captcha solving attempts',
    ['status', 'captcha_type', 'solving_method']
)

# 6. –í–†–ï–ú–Ø –†–ï–®–ï–ù–ò–Ø –ö–ê–ü–ß–ò (–≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
CAPTCHA_SOLVING_DURATION = Histogram(
    'captcha_solving_duration_seconds',
    'Captcha solving duration in seconds',
    ['captcha_type', 'solving_method']
)

# 7. –ê–ö–¢–ò–í–ù–´–ï –ó–ê–î–ê–ß–ò (–≥—Ä–∞—Ñ–∏–∫ –Ω–∞–≥—Ä—É–∑–∫–∏)
ACTIVE_PARSING_TASKS = Gauge(
    'active_parsing_tasks',
    'Number of currently active parsing tasks',
    ['status']
)

# 8. –†–ê–ó–ú–ï–† –û–ß–ï–†–ï–î–ò (–≥—Ä–∞—Ñ–∏–∫ –æ—á–µ—Ä–µ–¥–∏)
TASK_QUEUE_SIZE = Gauge(
    'task_queue_size',
    'Current size of the task queue'
)

# 9. –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ü–ê–ú–Ø–¢–ò (–≥—Ä–∞—Ñ–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤)
MEMORY_USAGE_BYTES = Gauge(
    'memory_usage_bytes',
    'Current memory usage in bytes'
)

# 10. –í–†–ï–ú–Ø –†–ê–ë–û–¢–´ (–≥—Ä–∞—Ñ–∏–∫ uptime)
APPLICATION_UPTIME_SECONDS = Gauge(
    'application_uptime_seconds',
    'Application uptime in seconds'
)

# 12. –û–®–ò–ë–ö–ò (–≥—Ä–∞—Ñ–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º)
ERRORS_TOTAL = Counter(
    'errors_total',
    'Total number of errors',
    ['error_type', 'endpoint', 'status_code']
)

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

def get_metrics():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus"""
    return generate_latest()

def get_metrics_response() -> Response:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ –≤–∏–¥–µ FastAPI Response"""
    return Response(
        content=get_metrics(),
        media_type=CONTENT_TYPE_LATEST
    )

# ===== –î–ï–ö–û–†–ê–¢–û–†–´ –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –°–ë–û–†–ê –ú–ï–¢–†–ò–ö =====

def track_http_metrics():
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è HTTP –º–µ—Ç—Ä–∏–∫ (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤)"""
    def decorator(func: Callable[..., Awaitable[Any]]):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            logger.info(f"üîç –î–µ–∫–æ—Ä–∞—Ç–æ—Ä track_http_metrics –≤—ã–∑–≤–∞–Ω –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}")
            
            request: Request | None = None

            # FastAPI –æ–±—ã—á–Ω–æ –∫–ª–∞–¥—ë—Ç request –≤ kwargs
            if "request" in kwargs and isinstance(kwargs["request"], Request):
                request = kwargs["request"]
            else:
                # fallback: –∏—â–µ–º —Å—Ä–µ–¥–∏ args
                for arg in args:
                    if isinstance(arg, Request):
                        request = arg
                        break

            if request is None:
                # –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±–µ–∑ –º–µ—Ç—Ä–∏–∫
                return await func(*args, **kwargs)
            
            logger.info(f" –Ω–∞–π–¥–µ–Ω: {request.method} {request.url.path}")
            start_time = time.time()
            
            try:
                result = await func(*args, **kwargs)
                
                # –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
                duration = time.time() - start_time
                
                logger.info(f"üìä –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {request.method} {request.url.path}")
                
                # 1. –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ (–≥—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
                HTTP_REQUESTS_TOTAL.labels(
                    method=request.method,
                    endpoint=request.url.path,
                    status=200,
                    client_ip=request.client.host
                ).inc()
                
                # 2. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
                HTTP_REQUEST_DURATION.labels(
                    method=request.method,
                    endpoint=request.url.path
                ).observe(duration)
                
                logger.info(f" –ú–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {request.method} {request.url.path}")
                return result
                
            except Exception as e:
                # –û—à–∏–±–∫–∞ - –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
                duration = time.time() - start_time
                status = getattr(e, 'status_code', 500)
                
                logger.info(f" –û—à–∏–±–∫–∞ –≤ {request.method} {request.url.path}, –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–æ–∫")
                
                # 1. –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (–≥—Ä–∞—Ñ–∏–∫ –æ—à–∏–±–æ–∫)
                HTTP_REQUESTS_TOTAL.labels(
                    method=request.method,
                    endpoint=request.url.path,
                    status=status,
                    client_ip=request.client.host
                ).inc()
                
                # 2. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ)
                HTTP_REQUEST_DURATION.labels(
                    method=request.method,
                    endpoint=request.url.path
                ).observe(duration)
                
                # 3. –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º (–≥—Ä–∞—Ñ–∏–∫ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫)
                ERRORS_TOTAL.labels(
                    error_type=type(e).__name__,
                    endpoint=request.url.path,
                    status_code=status
                ).inc()
                
                logger.info(f" –ú–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {request.method} {request.url.path}")
                raise
                
        return wrapper
    return decorator

def track_parsing_metrics(court_type: str, parsing_method: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤)"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            start_time = time.time()
            
            try:
                result = func(*args, **kwargs)
                
                # –£—Å–ø–µ—à–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ - –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
                duration = time.time() - start_time
                
                # 1. –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤ (–≥—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏)
                COURT_PARSING_TOTAL.labels(
                    court_type=court_type,
                    status="success",
                    parsing_method=parsing_method
                ).inc()
                
                # 2. –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
                COURT_PARSING_DURATION.labels(
                    court_type=court_type,
                    parsing_method=parsing_method
                ).observe(duration)
                
                return result
                
            except Exception as e:
                # –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ - –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
                duration = time.time() - start_time
                
                # 1. –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–≥—Ä–∞—Ñ–∏–∫ –æ—à–∏–±–æ–∫)
                COURT_PARSING_TOTAL.labels(
                    court_type=court_type,
                    status="error",
                    parsing_method=parsing_method
                ).inc()
                
                # 2. –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏ (–≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
                COURT_PARSING_DURATION.labels(
                    court_type=court_type,
                    parsing_method=parsing_method
                ).observe(duration)
                
                raise
                
        return wrapper
    return decorator

def track_captcha_metrics(captcha_type: str, solving_method: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∫–∞–ø—á–∏ (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤)"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            start_time = time.time()
            
            try:
                result = func(*args, **kwargs)
                
                # –£—Å–ø–µ—à–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
                duration = time.time() - start_time
                
                # 1. –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π (–≥—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏)
                CAPTCHA_SOLVING_TOTAL.labels(
                    status="success",
                    captcha_type=captcha_type,
                    solving_method=solving_method
                ).inc()
                
                # 2. –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è (–≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
                CAPTCHA_SOLVING_DURATION.labels(
                    captcha_type=captcha_type,
                    solving_method=solving_method
                ).observe(duration)
                
                return result
                
            except Exception as e:
                # –û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è - –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
                duration = time.time() - start_time
                
                # 1. –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Ä–µ—à–µ–Ω–∏—è (–≥—Ä–∞—Ñ–∏–∫ –æ—à–∏–±–æ–∫)
                CAPTCHA_SOLVING_TOTAL.labels(
                    status="error",
                    captcha_type=captcha_type,
                    solving_method=solving_method
                ).inc()
                
                # 2. –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏ (–≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
                CAPTCHA_SOLVING_DURATION.labels(
                    captcha_type=captcha_type,
                    solving_method=solving_method
                ).observe(duration)
                
                raise
                
        return wrapper
    return decorator

# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø GAUGE –ú–ï–¢–†–ò–ö =====

def update_task_metrics(active_tasks: int, queued_tasks: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∑–∞–¥–∞—á (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –Ω–∞–≥—Ä—É–∑–∫–∏)"""
    ACTIVE_PARSING_TASKS.labels(status="running").set(active_tasks)
    ACTIVE_PARSING_TASKS.labels(status="queued").set(queued_tasks)
    TASK_QUEUE_SIZE.set(queued_tasks)

def update_memory_metrics():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–∞–º—è—Ç–∏ (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤)"""
    import psutil
    try:
        process = psutil.Process()
        memory_info = process.memory_info()
        MEMORY_USAGE_BYTES.set(memory_info.rss)
    except ImportError:
        # psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –æ—Ü–µ–Ω–∫—É
        import gc
        gc.collect()
        MEMORY_USAGE_BYTES.set(0)

def update_uptime_metric():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ uptime)"""
    import time
    start_time = getattr(update_uptime_metric, 'start_time', None)
    if start_time is None:
        start_time = time.time()
        update_uptime_metric.start_time = start_time
    
    uptime = time.time() - start_time
    APPLICATION_UPTIME_SECONDS.set(uptime)

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–ï–¢–†–ò–ö =====

def initialize_metrics():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    APPLICATION_UPTIME_SECONDS.set(0)
    TASK_QUEUE_SIZE.set(0)
    ACTIVE_PARSING_TASKS.labels(status="running").set(0)
    ACTIVE_PARSING_TASKS.labels(status="queued").set(0)
    MEMORY_USAGE_BYTES.set(0)
    
    logger.info("–ú–µ—Ç—Ä–∏–∫–∏ Prometheus –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")

async def metrics_poller():
        while True:
            update_uptime_metric()
            update_memory_metrics()
            await asyncio.sleep(5)